import React, { useState, useEffect } from 'react';
import { Check, Plane, Hotel, MapPin, Clock } from 'lucide-react';

// Previous Foundation Components
const GlobalLayout = ({ children }) => {
  return (
    <div className="min-h-screen flex flex-col bg-white text-slate-900 font-sans">
      <main className="flex-grow">
        {children}
      </main>
    </div>
  );
};

const Container = ({ children, className = "" }) => {
  return (
    <div className={`container-component ${className}`}>
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {children}
      </div>
    </div>
  );
};

const Card = ({ 
  children, 
  className = "", 
  hover = false 
}) => {
  const baseClasses = "bg-white rounded-xl shadow-md p-6 sm:p-8";
  const hoverClasses = hover ? "hover:shadow-lg transition-shadow duration-200" : "";
  
  return (
    <div className={`${baseClasses} ${hoverClasses} ${className}`}>
      {children}
    </div>
  );
};

const Button = ({ 
  children, 
  variant = "primary", 
  type = "button", 
  disabled = false, 
  loading = false, 
  onClick = () => {},
  className = ""
}) => {
  const baseClasses = "font-medium py-2 px-4 rounded-md shadow-sm transition-all duration-200 inline-flex items-center justify-center";
  
  const variants = {
    primary: `bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white ${baseClasses}`,
    secondary: `bg-white hover:bg-slate-50 text-slate-700 border border-slate-300 ${baseClasses}`
  };
  
  return (
    <button
      type={type}
      className={`${variants[variant]} ${className}`}
      disabled={disabled || loading}
      onClick={onClick}
    >
      {loading && (
        <svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      )}
      {children}
    </button>
  );
};

// 9. Skeleton Loader Component
const SkeletonLoader = ({ type = "default", count = 3 }) => {
  const FlightSkeleton = () => (
    <div className="animate-pulse">
      <div className="flex items-center space-x-4">
        <div className="rounded-full bg-slate-200 h-6 w-6"></div>
        <div className="flex-1 space-y-2">
          <div className="h-4 bg-slate-200 rounded w-3/4"></div>
          <div className="h-3 bg-slate-200 rounded w-1/2"></div>
        </div>
      </div>
    </div>
  );
  
  const HotelSkeleton = () => (
    <div className="animate-pulse">
      <div className="flex items-center space-x-4">
        <div className="rounded bg-slate-200 h-6 w-6"></div>
        <div className="flex-1 space-y-2">
          <div className="h-4 bg-slate-200 rounded w-2/3"></div>
          <div className="h-3 bg-slate-200 rounded w-1/3"></div>
          <div className="h-3 bg-slate-200 rounded w-1/4"></div>
        </div>
      </div>
    </div>
  );
  
  const ActivitySkeleton = () => (
    <div className="animate-pulse">
      <div className="flex items-center space-x-4">
        <div className="rounded-full bg-slate-200 h-6 w-6"></div>
        <div className="flex-1 space-y-2">
          <div className="h-4 bg-slate-200 rounded w-5/6"></div>
          <div className="h-3 bg-slate-200 rounded w-3/4"></div>
        </div>
      </div>
    </div>
  );
  
  const renderSkeleton = () => {
    switch (type) {
      case "flight":
        return <FlightSkeleton />;
      case "hotel":
        return <HotelSkeleton />;
      case "activity":
        return <ActivitySkeleton />;
      default:
        return <FlightSkeleton />;
    }
  };
  
  return (
    <div className="space-y-4">
      {Array.from({ length: count }, (_, i) => (
        <div key={i} className="py-4">
          {renderSkeleton()}
        </div>
      ))}
    </div>
  );
};

// 10. Day Tabs Navigation Component
const DayTabsNavigation = ({ days = [], activeDay = 0, onDayChange = () => {} }) => {
  return (
    <div className="border-b border-slate-200">
      <nav className="-mb-px flex space-x-8 overflow-x-auto" aria-label="Tabs">
        {days.map((day, index) => {
          const isActive = index === activeDay;
          const tabClasses = `whitespace-nowrap border-b-2 py-4 px-1 text-sm font-medium transition-colors duration-200 ${
            isActive 
              ? "border-blue-500 text-blue-600" 
              : "border-transparent text-slate-500 hover:border-slate-300 hover:text-slate-700"
          }`;
          
          return (
            <button
              key={index}
              className={tabClasses}
              onClick={() => onDayChange(index)}
              aria-current={isActive ? "page" : undefined}
            >
              <span>Day {day.day}</span>
              {day.summary && (
                <span className="hidden sm:inline"> - {day.summary}</span>
              )}
            </button>
          );
        })}
      </nav>
    </div>
  );
};

// 11. Itinerary Item Component
const ItineraryItem = ({ 
  type = "activity", 
  time, 
  title, 
  description, 
  price, 
  link, 
  icon 
}) => {
  const getIcon = () => {
    if (icon) return icon;
    
    switch (type) {
      case "flight":
        return <Plane className="h-5 w-5 text-blue-600" />;
      case "hotel":
        return <Hotel className="h-5 w-5 text-green-600" />;
      case "activity":
        return <MapPin className="h-5 w-5 text-purple-600" />;
      default:
        return <Clock className="h-5 w-5 text-slate-600" />;
    }
  };
  
  return (
    <li className="flex items-start space-x-4 py-4 border-b border-slate-100 last:border-b-0">
      <div className="flex-shrink-0 mt-1">
        {getIcon()}
      </div>
      <div className="min-w-0 flex-1">
        {time && (
          <div className="text-sm text-slate-500 mb-1">
            {time}
          </div>
        )}
        <h3 className="text-base font-medium text-slate-900 mb-1">
          {title}
        </h3>
        {description && (
          <p className="text-sm text-slate-700 mt-1 mb-2">
            {description}
          </p>
        )}
        {(link || price) && (
          <a
            href={link || "#"}
            target={link ? "_blank" : undefined}
            rel={link ? "noopener" : undefined}
            className="inline-block mt-2 text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors duration-200"
          >
            {price ? `View Deal • ${price}` : "View Details"}
          </a>
        )}
      </div>
    </li>
  );
};

// Demo Component showcasing the Itinerary Preview Components
const ItineraryPreviewDemo = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [activeDay, setActiveDay] = useState(0);
  
  // Mock itinerary data
  const mockItinerary = {
    user: { name: "Sarah", destination: "Rome, Italy" },
    days: [
      {
        day: 1,
        date: "2024-06-01",
        summary: "Arrival",
        activities: [
          {
            type: "flight",
            time: "08:00 - 22:30",
            title: "Flight: JFK to FCO",
            description: "Delta DL 123 • 8h 30m • Economy",
            price: "$650",
            link: "https://example.com/flight-deal"
          },
          {
            type: "hotel",
            time: "Check-in after 15:00",
            title: "Hotel Roma Centrale",
            description: "4-star hotel in city center • Free breakfast • Pool",
            price: "$200/night",
            link: "https://example.com/hotel-deal"
          }
        ]
      },
      {
        day: 2,
        date: "2024-06-02",
        summary: "Explore",
        activities: [
          {
            type: "activity",
            time: "09:00 - 12:00",
            title: "Colosseum Tour",
            description: "Skip-the-line guided tour of ancient amphitheater",
            price: "$45",
            link: "https://example.com/colosseum-tour"
          },
          {
            type: "activity",
            time: "14:00 - 17:00",
            title: "Vatican Museums",
            description: "Sistine Chapel and St. Peter's Basilica tour",
            price: "$65",
            link: "https://example.com/vatican-tour"
          },
          {
            type: "activity",
            time: "19:00",
            title: "Dinner at Trattoria da Enzo",
            description: "Traditional Roman cuisine in Trastevere district",
            price: "€€€"
          }
        ]
      },
      {
        day: 3,
        date: "2024-06-03",
        summary: "Culture",
        activities: [
          {
            type: "activity",
            time: "10:00 - 13:00",
            title: "Roman Forum & Palatine Hill",
            description: "Walk through ancient Roman ruins and imperial palaces",
            price: "$35"
          },
          {
            type: "activity",
            time: "15:00 - 18:00",
            title: "Capitoline Museums",
            description: "World's oldest public museums with Renaissance art",
            price: "$25"
          }
        ]
      }
    ]
  };
  
  // Simulate loading
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 2000);
    
    return () => clearTimeout(timer);
  }, []);
  
  return (
    <GlobalLayout>
      <Container className="py-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-slate-900 mb-2">
              Your Perfect Trip to {mockItinerary.user.destination}
            </h1>
            <p className="text-slate-600">
              Here's your personalized itinerary, {mockItinerary.user.name}!
            </p>
          </div>
          
          <Card>
            {isLoading ? (
              // Loading State
              <div className="space-y-8">
                <div className="text-center">
                  <div className="animate-pulse">
                    <div className="h-6 bg-slate-200 rounded w-1/2 mx-auto mb-4"></div>
                    <div className="h-4 bg-slate-200 rounded w-1/3 mx-auto"></div>
                  </div>
                </div>
                
                {/* Skeleton Day Tabs */}
                <div className="border-b border-slate-200">
                  <div className="flex space-x-8">
                    {Array.from({ length: 3 }, (_, i) => (
                      <div key={i} className="animate-pulse py-4">
                        <div className="h-4 bg-slate-200 rounded w-16"></div>
                      </div>
                    ))}
                  </div>
                </div>
                
                {/* Skeleton Content */}
                <SkeletonLoader type="flight" count={2} />
                <SkeletonLoader type="hotel" count={1} />
                <SkeletonLoader type="activity" count={3} />
              </div>
            ) : (
              // Loaded Content
              <div className="space-y-6">
                {/* Day Navigation Tabs */}
                <DayTabsNavigation
                  days={mockItinerary.days}
                  activeDay={activeDay}
                  onDayChange={setActiveDay}
                />
                
                {/* Current Day Content */}
                <div className="min-h-[400px]">
                  <div className="mb-4">
                    <h2 className="text-xl font-semibold text-slate-900">
                      Day {mockItinerary.days[activeDay].day} - {mockItinerary.days[activeDay].date}
                    </h2>
                    <p className="text-slate-600">
                      {mockItinerary.days[activeDay].summary}
                    </p>
                  </div>
                  
                  {/* Itinerary Items */}
                  <ul className="space-y-0">
                    {mockItinerary.days[activeDay].activities.map((activity, index) => (
                      <ItineraryItem
                        key={index}
                        type={activity.type}
                        time={activity.time}
                        title={activity.title}
                        description={activity.description}
                        price={activity.price}
                        link={activity.link}
                      />
                    ))}
                  </ul>
                </div>
                
                {/* Action Buttons */}
                <div className="flex justify-between pt-6 border-t border-slate-200">
                  <Button variant="secondary">
                    ← Edit Preferences
                  </Button>
                  <Button variant="primary">
                    Download PDF Itinerary
                  </Button>
                </div>
              </div>
            )}
          </Card>
          
          {/* Loading State Demo Toggle */}
          <div className="text-center mt-8">
            <Button
              variant="secondary"
              onClick={() => {
                setIsLoading(true);
                setTimeout(() => setIsLoading(false), 2000);
              }}
            >
              Simulate Loading
            </Button>
          </div>
        </div>
      </Container>
    </GlobalLayout>
  );
};

export default ItineraryPreviewDemo;
