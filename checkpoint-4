import React, { useState, useEffect } from 'react';
import { Check, Plane, Hotel, MapPin, Clock, X, CheckCircle, AlertCircle, Info } from 'lucide-react';

// Previous Foundation Components
const GlobalLayout = ({ children }) => {
  return (
    <div className="min-h-screen flex flex-col bg-white text-slate-900 font-sans">
      <main className="flex-grow">
        {children}
      </main>
    </div>
  );
};

const Container = ({ children, className = "" }) => {
  return (
    <div className={`container-component ${className}`}>
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {children}
      </div>
    </div>
  );
};

const Card = ({ 
  children, 
  className = "", 
  hover = false 
}) => {
  const baseClasses = "bg-white rounded-xl shadow-md p-6 sm:p-8";
  const hoverClasses = hover ? "hover:shadow-lg transition-shadow duration-200" : "";
  
  return (
    <div className={`${baseClasses} ${hoverClasses} ${className}`}>
      {children}
    </div>
  );
};

const Button = ({ 
  children, 
  variant = "primary", 
  type = "button", 
  disabled = false, 
  loading = false, 
  onClick = () => {},
  className = ""
}) => {
  const baseClasses = "font-medium py-2 px-4 rounded-md shadow-sm transition-all duration-200 inline-flex items-center justify-center";
  
  const variants = {
    primary: `bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white ${baseClasses}`,
    secondary: `bg-white hover:bg-slate-50 text-slate-700 border border-slate-300 ${baseClasses}`
  };
  
  return (
    <button
      type={type}
      className={`${variants[variant]} ${className}`}
      disabled={disabled || loading}
      onClick={onClick}
    >
      {loading && (
        <svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      )}
      {children}
    </button>
  );
};

// 12. Auth Gate Modal Component
const AuthGateModal = ({ 
  isOpen = false, 
  onClose = () => {}, 
  onAuthSuccess = () => {} 
}) => {
  const [activeTab, setActiveTab] = useState('signup');
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    setError(''); // Clear error when user types
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    
    // Basic validation
    if (activeTab === 'signup' && formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      setIsLoading(false);
      return;
    }
    
    // Simulate authentication
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      onAuthSuccess();
      onClose();
    } catch (err) {
      setError('Authentication failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleGoogleAuth = async () => {
    setIsLoading(true);
    try {
      // Simulate Google OAuth
      await new Promise(resolve => setTimeout(resolve, 1000));
      onAuthSuccess();
      onClose();
    } catch (err) {
      setError('Google authentication failed.');
    } finally {
      setIsLoading(false);
    }
  };
  
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="relative bg-white rounded-xl shadow-xl max-w-md w-full">
        {/* Close Button */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-slate-400 hover:text-slate-600 transition-colors"
        >
          <X className="h-5 w-5" />
        </button>
        
        <div className="p-6">
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-slate-900 mb-2">
              Download Your Itinerary
            </h2>
            <p className="text-slate-600">
              Create an account to download your personalized travel plan
            </p>
          </div>
          
          {/* Tabs */}
          <div className="flex mb-6 bg-slate-100 rounded-lg p-1">
            <button
              className={`flex-1 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                activeTab === 'signup'
                  ? 'bg-white text-slate-900 shadow-sm'
                  : 'text-slate-600 hover:text-slate-900'
              }`}
              onClick={() => setActiveTab('signup')}
            >
              Sign Up
            </button>
            <button
              className={`flex-1 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                activeTab === 'login'
                  ? 'bg-white text-slate-900 shadow-sm'
                  : 'text-slate-600 hover:text-slate-900'
              }`}
              onClick={() => setActiveTab('login')}
            >
              Log In
            </button>
          </div>
          
          {/* Google OAuth Button */}
          <button
            onClick={handleGoogleAuth}
            disabled={isLoading}
            className="w-full flex justify-center items-center px-4 py-2 border border-slate-300 rounded-md shadow-sm bg-white text-sm font-medium text-slate-700 hover:bg-slate-50 transition-all duration-200 mb-4 disabled:opacity-50"
          >
            <svg className="w-4 h-4 mr-2" viewBox="0 0 24 24">
              <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            Continue with Google
          </button>
          
          {/* Separator */}
          <div className="relative flex items-center my-6">
            <div className="flex-grow border-t border-slate-300"></div>
            <span className="mx-3 text-slate-500 text-sm">or</span>
            <div className="flex-grow border-t border-slate-300"></div>
          </div>
          
          {/* Email/Password Form */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <input
              type="email"
              name="email"
              placeholder="Email Address"
              required
              value={formData.email}
              onChange={handleInputChange}
              className="block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-2 px-3 border"
            />
            <input
              type="password"
              name="password"
              placeholder="Password"
              required
              value={formData.password}
              onChange={handleInputChange}
              className="block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-2 px-3 border"
            />
            {activeTab === 'signup' && (
              <input
                type="password"
                name="confirmPassword"
                placeholder="Confirm Password"
                required
                value={formData.confirmPassword}
                onChange={handleInputChange}
                className="block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-2 px-3 border"
              />
            )}
            
            {error && (
              <p className="text-sm text-red-600 text-center">
                {error}
              </p>
            )}
            
            <Button
              type="submit"
              variant="primary"
              loading={isLoading}
              className="w-full"
            >
              {activeTab === 'signup' ? 'Create Account' : 'Sign In'}
            </Button>
          </form>
          
          <p className="text-xs text-slate-500 text-center mt-4">
            By continuing, you agree to our Terms of Service and Privacy Policy.
          </p>
        </div>
      </div>
    </div>
  );
};

// 13. Toast Notification Component
const ToastNotification = ({ 
  type = 'success', 
  message, 
  isVisible = false, 
  onClose = () => {} 
}) => {
  const [show, setShow] = useState(isVisible);
  
  useEffect(() => {
    if (isVisible) {
      setShow(true);
      const timer = setTimeout(() => {
        setShow(false);
        setTimeout(() => onClose(), 300); // Wait for fade out animation
      }, 4000);
      return () => clearTimeout(timer);
    }
  }, [isVisible, onClose]);
  
  const getIcon = () => {
    switch (type) {
      case 'success':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'error':
        return <AlertCircle className="h-5 w-5 text-red-500" />;
      case 'info':
        return <Info className="h-5 w-5 text-blue-500" />;
      default:
        return <CheckCircle className="h-5 w-5 text-green-500" />;
    }
  };
  
  const getBorderColor = () => {
    switch (type) {
      case 'success':
        return 'border-green-500';
      case 'error':
        return 'border-red-500';
      case 'info':
        return 'border-blue-500';
      default:
        return 'border-green-500';
    }
  };
  
  if (!show) return null;
  
  return (
    <div className={`fixed top-4 right-4 max-w-sm w-full bg-white rounded-lg shadow-lg pointer-events-auto flex p-4 border-l-4 z-50 transform transition-all duration-300 ${
      show ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'
    } ${getBorderColor()}`}>
      <div className="flex-shrink-0">
        {getIcon()}
      </div>
      <div className="ml-3 flex-1">
        <p className="text-sm text-slate-700">
          {message}
        </p>
      </div>
      <button
        onClick={() => {
          setShow(false);
          setTimeout(() => onClose(), 300);
        }}
        className="ml-4 flex-shrink-0 text-slate-400 hover:text-slate-600 transition-colors"
      >
        <X className="h-4 w-4" />
      </button>
    </div>
  );
};

// Demo Component showcasing Authentication & System Components
const AuthSystemDemo = () => {
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [toasts, setToasts] = useState([]);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  
  const addToast = (type, message) => {
    const id = Date.now();
    setToasts(prev => [...prev, { id, type, message }]);
  };
  
  const removeToast = (id) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  };
  
  const handleAuthSuccess = () => {
    setIsAuthenticated(true);
    addToast('success', 'Successfully logged in! Your itinerary is downloading...');
    
    // Simulate PDF download
    setTimeout(() => {
      addToast('info', 'PDF download started. Check your downloads folder.');
    }, 1000);
  };
  
  const handleDownloadClick = () => {
    if (isAuthenticated) {
      addToast('info', 'Your itinerary is downloading...');
    } else {
      setShowAuthModal(true);
    }
  };
  
  const showDemoToasts = () => {
    addToast('success', 'Trip saved successfully!');
    setTimeout(() => addToast('error', 'Unable to connect to server. Please try again.'), 1000);
    setTimeout(() => addToast('info', 'New features available in your dashboard.'), 2000);
  };
  
  return (
    <GlobalLayout>
      <Container className="py-8">
        <div className="max-w-2xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-slate-900 mb-4">
              Authentication & System Components Demo
            </h1>
            <p className="text-slate-600">
              Test the auth gate modal and toast notification system
            </p>
          </div>
          
          <Card>
            <div className="space-y-6">
              {/* Auth Status */}
              <div className="text-center p-4 bg-slate-50 rounded-lg">
                <p className="text-sm text-slate-600 mb-2">Current Status:</p>
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                  isAuthenticated 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  {isAuthenticated ? 'Authenticated' : 'Not Authenticated'}
                </span>
              </div>
              
              {/* Demo Actions */}
              <div className="space-y-4">
                <h2 className="text-lg font-semibold text-slate-900">
                  Try These Actions:
                </h2>
                
                <div className="grid gap-4">
                  <Button
                    variant="primary"
                    onClick={handleDownloadClick}
                    className="w-full"
                  >
                    Download PDF Itinerary
                    <span className="ml-2 text-xs opacity-75">
                      (Triggers auth gate if not logged in)
                    </span>
                  </Button>
                  
                  <Button
                    variant="secondary"
                    onClick={() => setShowAuthModal(true)}
                    className="w-full"
                  >
                    Show Auth Modal
                  </Button>
                  
                  <Button
                    variant="secondary"
                    onClick={showDemoToasts}
                    className="w-full"
                  >
                    Demo Toast Notifications
                  </Button>
                  
                  <Button
                    variant="secondary"
                    onClick={() => {
                      setIsAuthenticated(false);
                      addToast('info', 'Logged out successfully');
                    }}
                    className="w-full"
                    disabled={!isAuthenticated}
                  >
                    Logout
                  </Button>
                </div>
              </div>
              
              {/* Features List */}
              <div className="mt-8 p-4 bg-blue-50 rounded-lg">
                <h3 className="font-semibold text-blue-900 mb-2">Component Features:</h3>
                <div className="grid md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <h4 className="font-medium text-blue-800">Auth Gate Modal:</h4>
                    <ul className="text-blue-700 space-y-1 ml-4">
                      <li>• Sign up / Login tabs</li>
                      <li>• Google OAuth integration</li>
                      <li>• Form validation</li>
                      <li>• Loading states</li>
                      <li>• Error handling</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-medium text-blue-800">Toast Notifications:</h4>
                    <ul className="text-blue-700 space-y-1 ml-4">
                      <li>• Success, Error, Info types</li>
                      <li>• Auto-dismiss after 4 seconds</li>
                      <li>• Smooth animations</li>
                      <li>• Manual close option</li>
                      <li>• Multiple toast stacking</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </Card>
        </div>
      </Container>
      
      {/* Auth Gate Modal */}
      <AuthGateModal
        isOpen={showAuthModal}
        onClose={() => setShowAuthModal(false)}
        onAuthSuccess={handleAuthSuccess}
      />
      
      {/* Toast Notifications */}
      {toasts.map((toast) => (
        <ToastNotification
          key={toast.id}
          type={toast.type}
          message={toast.message}
          isVisible={true}
          onClose={() => removeToast(toast.id)}
        />
      ))}
    </GlobalLayout>
  );
};

export default AuthSystemDemo;
